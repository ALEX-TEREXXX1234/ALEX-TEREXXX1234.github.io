<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Экспертные системы. Урок №9</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<script language="JavaScript" type="text/JavaScript">
<!--
function MM_preloadImages() { //v3.0
  var d=document; if(d.images){ if(!d.MM_p) d.MM_p=new Array();
    var i,j=d.MM_p.length,a=MM_preloadImages.arguments; for(i=0; i<a.length; i++)
    if (a[i].indexOf("#")!=0){ d.MM_p[j]=new Image; d.MM_p[j++].src=a[i];}}
}

function MM_findObj(n, d) { //v4.01
  var p,i,x;  if(!d) d=document; if((p=n.indexOf("?"))>0&&parent.frames.length) {
    d=parent.frames[n.substring(p+1)].document; n=n.substring(0,p);}
  if(!(x=d[n])&&d.all) x=d.all[n]; for (i=0;!x&&i<d.forms.length;i++) x=d.forms[i][n];
  for(i=0;!x&&d.layers&&i<d.layers.length;i++) x=MM_findObj(n,d.layers[i].document);
  if(!x && d.getElementById) x=d.getElementById(n); return x;
}

function MM_nbGroup(event, grpName) { //v6.0
  var i,img,nbArr,args=MM_nbGroup.arguments;
  if (event == "init" && args.length > 2) {
    if ((img = MM_findObj(args[2])) != null && !img.MM_init) {
      img.MM_init = true; img.MM_up = args[3]; img.MM_dn = img.src;
      if ((nbArr = document[grpName]) == null) nbArr = document[grpName] = new Array();
      nbArr[nbArr.length] = img;
      for (i=4; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
        if (!img.MM_up) img.MM_up = img.src;
        img.src = img.MM_dn = args[i+1];
        nbArr[nbArr.length] = img;
    } }
  } else if (event == "over") {
    document.MM_nbOver = nbArr = new Array();
    for (i=1; i < args.length-1; i+=3) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = (img.MM_dn && args[i+2]) ? args[i+2] : ((args[i+1])? args[i+1] : img.MM_up);
      nbArr[nbArr.length] = img;
    }
  } else if (event == "out" ) {
    for (i=0; i < document.MM_nbOver.length; i++) {
      img = document.MM_nbOver[i]; img.src = (img.MM_dn) ? img.MM_dn : img.MM_up; }
  } else if (event == "down") {
    nbArr = document[grpName];
    if (nbArr)
      for (i=0; i < nbArr.length; i++) { img=nbArr[i]; img.src = img.MM_up; img.MM_dn = 0; }
    document[grpName] = nbArr = new Array();
    for (i=2; i < args.length-1; i+=2) if ((img = MM_findObj(args[i])) != null) {
      if (!img.MM_up) img.MM_up = img.src;
      img.src = img.MM_dn = (args[i+1])? args[i+1] : img.MM_up;
      nbArr[nbArr.length] = img;
  } }
}
//-->
</script>
</head>

<body bgcolor="#FFCC99">
<blockquote> 
  <table border="0" cellpadding="0" cellspacing="0">
    <tr> 
      <td><a href="003.htm" target="_self" onClick="MM_nbGroup('down','group1','Back','',1)" onMouseOver="MM_nbGroup('over','Back','','',1)" onMouseOut="MM_nbGroup('out')"><img src="img/Back.gif" alt="" name="Back" width="73" height="22" border="0" onload=""></a></td>
      <td><a href="main09.htm" target="_self" onClick="MM_nbGroup('down','group1','Menu','',1)" onMouseOver="MM_nbGroup('over','Menu','','',1)" onMouseOut="MM_nbGroup('out')"><img src="img/Menu.gif" alt="" name="Menu" width="73" height="22" border="0" onload=""></a></td>
      <td><a href="005.htm" target="_self" onClick="MM_nbGroup('down','group1','For','',1)" onMouseOver="MM_nbGroup('over','For','','',1)" onMouseOut="MM_nbGroup('out')"><img src="img/For.gif" alt="" name="For" width="73" height="22" border="0" onload=""></a></td>
    </tr>
  </table>
  
</blockquote>
<p align="center"><font size="5"><strong>Оболочки ЭС</strong></font></p>
<p align="justify">Классификация оболочек ЭС. Применение оболочек ЭС рассчитано 
  на прикладных специалистов, не владеющих языками программирования, поэтому в 
  оболочки включают разнообразные средства, необходимые для построения ЭС. Наиболее 
  совершенные оболочки содержат средства извлечения знаний, их тестирования, редактирования, 
  накопления и актуализации. В состав оболочки также входят средства для разработки 
  пользовательского интерфейса самим пользователем.<br>
  Следует отметить, что оболочки ЭС имеют и недостатки. Прежде всего к ним относятся 
  ограничение на сферу применения (динамические, статистические задачи), высокие 
  требования к объемам оперативной и внешней памяти, большое время реакции и др.<br>
  В настоящее время наиболее развиты оболочки для правило-ориентированной формы 
  представления неструктурированных знаний. Однако имеются оболочки для представления 
  знаний в виде фреймов и семантических сетей. В состав оболочек также включают 
  СУБД, электронные таблицы, пакеты деловой или элементарной графики, языки высокого 
  уровня (проблемно ориентированные). В оболочки также вводят средства взаимодействия 
  ЭС с ОС ЭВМ, внешними пакетами программ, СУБД и внешними базами данных.<br>
  Различают следующие типы оболочек ЭС: 1) простые - правило-ориентированные, 
  позволяющие записывать знания в виде правил и хранить их в единственной БЗ; 
  2) структурированные правило-ориентированные, позволяющие разделять БЗ на подмножества, 
  иерархически связанные между собой (одно из преимуществ таких оболочек - возможность 
  многократного применения одного и того же множества правил при решении одной 
  задачи; кроме того, структурирование позволяет одному множеству правил наследовать 
  информацию, порожденную другим); 3) индуктивные, требующие ввода в систему совокупности 
  примеров, иллюстрирующих факты и отношения (применяя один или несколько алгоритмов 
  к этим примерам, оболочка вырабатывает дерево решений, на основании которого 
  ЭС осуществляет выдачу вопросов пользователю); 4) интегрированные; 5) модульные; 
  6) универсальные; 7) оболочки для больших универсальных ЭВМ; 8) оболочки для 
  малых ЭВМ и рабочих станций; 9) оболочки для ПЭВМ; 10) LISP -оболочки; 11) проблемно 
  ориентированные оболочки; 12) оболочки, ориентированные на прикладную область; 
  13) оболочки для ЭС, работающих в реальном масштабе времени.<br>
  Оболочки все чаще разрабатываются как универсальные, обеспечивающие реализацию 
  любой из моделей представления знаний или любого их сочетания. У современных 
  оболочек ЭС пользовательский интерфейс обеспечивает работу на естественном языке 
  (например, ИНТЕРЭКСПЕРТ-версия 2). К наиболее известным зарубежным оболочкам 
  универсального типа относятся ART,KEE.<br>
  Степень универсальности оболочки определяется также наличием средств вывода. 
  Как известно, в ЭС реализуются три стратегии вывода: прямая, обратная, смешанная. 
  Оболочки, обеспечивающие реализацию этих стратегий или их попарные комбинации, 
  относятся к числу универсальных с точки зрения функционирования системы. Близки 
  к универсальным интегрированные оболочки, включающие в состав ПО разнообразные 
  средства, обеспечивающие реализацию всех работ, необходимых для построения ЭС.<br>
  Модульные оболочки представляют собой ПО для управления структурой и обеспечения 
  интерфейса с ЭС, но не включает базы знаний. Они предназначены для многоцелевого 
  использования с различными базами данных, что позволяет существенно упростить 
  разработку конкретной ЭС и свести ее к созданию БЗ.<br>
  Основные ограничения при использовании готовых модульных оболочек ЭС - представление 
  информации в определенном формате, ограничение выбора модели представления знаний, 
  необходимость обратного отслеживания, негибкость поиска.<br>
  В последние годы интенсивно развивались оболочки ЭС проблемно и профессионально 
  ориентированного типов (problem specific и domain specific). Проблемно ориентированные 
  оболочки ЭС предназначены для решения определенного класса задач одной предметной 
  области, например диагностики, технологии, календарного планирования.<br>
  Как правило, проблемно ориентированные оболочки включают всеобъемлющие типы 
  знаний, но не включают специфические знания о проблеме. Примерами таких оболочек 
  являются: MicroInAte, ЭКСПЕРТ- МИКРО , ЭКРАН-Д, используемые для построения 
  ЭС диагностического типа;FFAST, используемая для построения ЭС для оценки инвестиций 
  ; Symtactics, применяемая при построении ЭС военно-прикладного назначения; Пролог-СМ, 
  используемая для разработки программ и трансляторов для ЭВМ; Leonardo, Crystal, 
  применяемая для построения ЭС в банковском, страховом деле и др. Специализированные 
  оболочки ЭС позволяют в наибольшей степени учитывать особенности предметной 
  области, упростить процессы приобретения знаний, создания и сопровождения БЗ.<br>
  Кроме того, имеются специальные оболочки для создания и поддержания баз данных. 
  Они могут использоваться в рамках как специализированных оболочек, так и универсальных. 
  К числу таких оболочек относятся FACT,KEATS,KAM,Knowledge Makes,KES,Neo ETS,TDE. 
  Лучшей зарубежной оболочкой ЭС проблемно-ориентированного типа считается Test 
  Bench.<br>
  Профессионально ориентированные оболочки ЭС предназначены для решения узкого 
  круга задач, соответствующих определенной профессии: программист, конструктор 
  и др. Профессионально ориентированные оболочки ЭС включают специфические знания. 
  Считается, что такие оболочки являются неполными, так как рассчитаны на то, 
  что разработчик дополнит вложенные в них знания в процессе разработки ЭС.<br>
  Профессионально ориентированные оболочки ЭС - альтернативное средство по отношению 
  к традиционному ПО для решения определенных задач.<br>
  Следует ввделить в отдельную группу оболочки, предназначенные для создания ЭС 
  реального масштаба времени. Во-первых, это объясняется специфической и постоянно 
  расширяющейся областью их использования; во-вторых, применением специальных 
  технических средств (параллельных, многопроцессорных ЭВМ) и программных средств, 
  базирующихся на алгоритмах распараллеливания, обязательным наличием доски объявлений 
  и других характеристик, существенно отличающих эти оболочки от других оболочек 
  ЭС, не используемых в реальном масштабе времени. К числу оболочек для ЭС реального 
  масштаба времени относятся G2, Picon.<br>
  Характеристики наиболее распространенных в СССР оболочек ЭС. Настраиваемый инструментальный 
  комплекс (НИК) представляет собой интегрированный пакет для разработчиков ЭС 
  на ПЭВМ. С его помощью можно формировать состав инструментальных средств, учитывающих 
  специфику проблемной области и обеспечивающих эффективное представление знаний 
  и создание БЗ для широкого класса задач. НИК включает оболочки НЭКС и ЭКО, средства 
  обработки временной информации (ОВИР), поступающей в динамических приложениях 
  на вход ЭС. ОВИР имеет механизмы разделения времени, пересмотра вывода и поддержания 
  истинности при изменении входных параметров, обработки событий и генерации параметров, 
  снятия показаний датчиков, моделирования проблемной области. НИК разработан 
  в ИНТЕРЭВМ (СССР).<br>
  Оболочка НЭКС - глубинная, гибридная, настраиваемая. Она позволяет представлять 
  глубинные знания о предметной области. Оболочка НЭКС предназначена для быстрого 
  построения демонстрационных и пользовательских прототипов ЭС. С ее помощью можно 
  строить как поверхностные, так и глубинные ЭС. Применение НЭКС облегчается для 
  пользователей тем, что они создавать БЗ, не владея основами программирования. 
  Оболочка включает следующие компоненты: приобретете знаний, отладку знаний, 
  визуализацию вывода, формирование готовых ЭС.<br>
  Компонент &quot;приобретение знаний&quot; предназначен для создания БЗ, ее актуализации. 
  Язык представления знаний оперирует такими элементами, как объекты, функции, 
  правила, метаправила. Каждый объект задается тройкой: имя - атрибут - значение, 
  что соответствует тройке сущность - характеристика - содержание проблемной области. 
  функции используются для описания взаимосвязей между атрибутами объектов. С 
  помощью правил, связывающих атрибуты объектов, задаются ситуации проблемной 
  области. Метаправила задают классы правил для решения однородных задач, за счет 
  чего объемы БЗ резко сокращаются и появляется возможность моделирования предметной 
  области.<br>
  Компонент &quot;отладка знаний&quot; используется вместе с компонентом приобретения 
  знаний. Отладка знаний осуществляется либо самим пользователем, либо системой 
  с помощью метаправил.<br>
  Компонент &quot;визуализация вывода&quot; позволяет представить БЗ в графическом 
  виде, а также зрительно проследить процесс вывода. На характер изображений никаких 
  ограничений не накладывается. Они могут формироваться с помощью любого графического 
  редактора. Изображения могут создаваться на определенном фоне, что облегчает 
  их восприятие.<br>
  Компонент &quot;формирование готовых ЭС&quot; дает возможность разрабатывать 
  индивидуальные интерфейсы пользователей и моделировать различные ситуации. :<br>
  Для ввода в БЗ нечетких правил и их обработки используются коэффициенты доверия, 
  задаваемые в диапазоне от 0 до +1. Нечеткие знания обрабатываются так же, как 
  и в системе MYCIN.<br>
  В режиме консультации НЭКС задает пользователю общие вопрооы и воспринимает 
  от пользователя только прямые ответы.<br>
  В оболочке НЭКС принята прямая стратегия обработки правил, но при задании определенных 
  условий можно реализовать и обратную.<br>
  Разрешение конфликтов осуществляется либо по заданным приоритетам правил, либо 
  на основании анализа степени их общности: первыми обрабатываются правила, являющиеся 
  частным случаем других правил.<br>
  НЭКС имеет систему объяснений, которая может настраиваться либо на инженера 
  по знаниям и давать ему объяснения о том, как работала система при выводе, либо 
  на пользователя и давать объяснения о том, как получены знания, выведенные системой.<br>
  НЭКС может работать с любыми пользовательскими функциями, написанными на языках 
  Си, Паскаль, Ассемблер,Scheme-Lisp.Сама система написана на языке Sch.em.e-Lisp 
  и может быть реализована на IBM PC-совместимых ЭВМ, имеющих ОП 512 Кбайт и адаптер 
  EGA<br>
  Оболочка ЭКО разработана в ИНТЕРЭВМ (СССР) и относится к интегрированным настраиваемым 
  оболочкам, ориентированным на решение плохо формализуемых задач планирования 
  и диагностики. В оболочку ЭКО включены редактор баз знаний и средства ведения 
  консультаций. ЭС, созданные с помощью системы ЭКО, и сама оболочка могут быть 
  включены в прикладную программную среду. Взаимодействие с конечным пользователем 
  осуществляется с помощью текстовых, анкетных и графических средств. В системе 
  имеются интерфейсы с СУБД и внешними программами, возможность изменения стандартного 
  состава перечисленных вычислительных средств.<br>
  БЗ имеет иерархическую структуру, объединяющую несколько отдельных БЗ. Разбиение 
  БЗ на отдельные вызвано ограниченным объемом оперативной памяти ПЭВМ. оперативной 
  памяти ПЭВМ. Кроме того, такая структура позволяет накапливать знания из разрозненных 
  источников. Их объединение осуществляется естественным путем при использовании 
  одних знаний другими.<br>
  В БЗ как элементы включены объекты, атрибуты, правила вывода, управляющий компонент 
  консультации. Определенность декларативных знаний устанавливается с помощью 
  коэффициентов уверенности. В правилах вывода используются формулы нечеткой логики, 
  формулы Байеса. Коэффициент (фактор) уверенности принимает значения в диапазоне 
  от -5,00 до +5,00. Знания в БЗ представлены в виде правил вида ЕСЛИ - ТО. В 
  зависимости от использования имени объекта или класса правила делятся на простые 
  и сложные.<br>
  В оболочке ЭКО имеются две подсистемы логического вывода, которые разработчики 
  называют машинами вывода: дедуктивная (Де-машина) и абдуктивная (АБ-машина). 
  Де-машина строит сеть выводов, в явном виде включающую все взаимосвязи между 
  атрибутами и утверждениями, обусловленные правилами вывода. Сеть вывода образует 
  замкнутый И - ИЛИ-граф, вершины которого соответствуют числовым атрибутам и 
  утверждениям, а дуги - простым правилам. Сложные правила путем компиляции преобразуются 
  в совокупности простых (на основе наследования свойств по родовидовому отношению).<br>
  Поиск пути от вершин, представляющих исходные данные задачи, к вершине, соответствующей 
  цели, Де-машина осуществляет по методу поиска &quot;в глубину&quot; с последующим 
  выводом от данных.<br>
  Правила АБ-машины в левой части имеют один объект - событие, в правой - несколько 
  объектов (симптомы событий). Из БЗ выбираются события, удовлетворяющие входному 
  множеству симптомов. Формируется первоначальная гипотеза, объясняющая предложенные 
  симптомы. Задавая дополнительные вопросы, машина улучшает свою гипотезу.<br>
  Конфликт разрешается .путем применения различных стратегий: выбирается первое 
  правило из списка или цель достигается путем применения всех правил, но выбирается 
  результат с наибольшим коэффициентом уверенности.<br>
  Управляющий компонент оболочки ЭКО включает детерминированную и продуктивную 
  части, реализованные соответственно в виде набора предложений сценария или в 
  виде совокупности демонов. Оболочка имеет модуль объяснения и дружественный 
  интерфейс, позволяющий общаться с ней и строить БЗ с помощью текстов, графики. 
  В оболочку встроены средства доступа к документации в виде гипертекста.<br>
  Оболочка допускает создание неограниченного числа БЗ (объемом до 1000 правил), 
  которые в последующем могут быть связаны в единую БЗ. База знаний может быть 
  представлена в графическом виде, а процесс консультации может быть прослежен 
  по соответствующему графу.<br>
  Оболочка ЭКО реализована на языках Си и Ассемблер и используется на ПЭВМ типа 
  EC-1841, IBM PC XT/AT в ОС Альфа ДОС 16, MSDOS 3.2 и выше. Объем требуемой памяти 
  - 200 Кбайт и 2 Мбайт на ЖМД.<br>
  Механизм вывода в системе ЭКО работает в трех режимах: 1) абдуктивный вывод 
  (задачи диагностики); 2) прямой вывод без предварительного планирования (работа 
  с датчиками, отслеживающими состояние процессов); 3) смешанный вывод - начальное 
  планирование целей и последующий вывод данных.<br>
  В оболочку ЭКО включены средства обучения, которые на конкретном примере демонстрируют 
  возможности ЭКО, технику работы с ней и технологию создания ЭС. Стоимость оболочки 
  ЭКО -15 - 20 тыс. р.<br>
  Оболочка ИНТЕРЭКСПЕРТ является интегрированной, обеспечивает представление знаний 
  в виде продукционных правил и решает статические задачи. Наиболее эффективные 
  области применения оболочки - экономика, диагностика, делопроизводство.<br>
  Оболочка ИНТЕРЭКСПЕРТ (рис. 1) включает пакеты программ, реализующие следующие 
  функции: создание баз знаний и баз данных реляционного типа, формирование и 
  обработку запросов на языке SQL, генерацию экранных форм и отчетов; организацию 
  вычислений с помощью табличных процессоров и электронных таблиц; статистический 
  анализ работы с текстами с помощью текстового процессора; деловую графику, дистанционную 
  связь с удаленными ЭВМ через сети типов ETHERNET,LAN.<br>
  Средства оболочки ИНТЕРЭКСПЕРТ сформированы таким образом, что пользователь 
  может решить любую задачу, не выходя за пределы оболочки. Каждому программному 
  пакету, входящему в оболочку, доступны данные, сформированные как внутри него, 
  так и в других пакетах оболочки и в БД. Из любого пакета можно обращаться к 
  другому, входящему в оболочку, задавать в качестве переменных поля, записи и 
  переменные другого пакета. Результаты вычислений могут быть представлены в графическом 
  виде.<br>
  <img src="img/file_04_01.PNG" width="915" height="686"><br>
  Основными понятиями, которые используются в оболочке ИНТЕР-ЭКСПЕРТ, являются 
  переменные, константы, выражения, функции, макроопределения и шаблоны. .<br>
  Переменная может иметь множество значений, в том числе одновременно. Значения 
  переменных могут изменяться. Переменные делятся на типы и классы. Тип переменной 
  связан с ее значением: числовое (вещественное), числовое, алфавитно-цифровое. 
  В соответствии с этим при работе системы ИНТЕРЭКСПЕРТ различают пять типов переменных: 
  символьные, числовые (вещественные), целые, логические, неизвестные. Указанные 
  типы переменных по смыслу совпадают с теми, которые используются в традиционных 
  системах обработки данных. Логические переменные могут изменять свое значение 
  с истинности на ложь и наоборот. Неизвестные переменные определяются в процессе 
  работы.<br>
  Класс переменной определяется ее функцией, реализуемой в процессе вывода. Различают 
  следующие классы переменных: поля, ячейки, рабочие переменные, настроечные переменные. 
  Переменные-поля используются при задании таблиц с записями данных, хранимых 
  в БД. Переменные-ячейки используются при работе с электронными таблицами. Рабочие 
  переменные могут содержать разнообразную информацию, формируемую в процессе 
  вывода: результаты вычислений, процедуры, команды и т.п. Тип рабочей переменной 
  может меняться в соответствии с изменением ее содержания. Рабочая переменная 
  может характеризоваться определенным значением фактора уверенности и может быть 
  четкой (и тогда имеет одно значение) и нечеткой (имеет несколько значений, каждое 
  из которых характеризуется определенным значением фактора уверенности).<br>
  Системные переменные (настроечные и внутренние рабочие) используются для адаптации 
  оболочки к конкретной архитектуре технических средств и операционной среде (настроечные 
  переменные) и для хранения промежуточных значений, используемых для управления 
  работой оболочки (внутренние рабочие переменные). Переменные имеют восьмибайтовые 
  имена.<br>
  Константы представляют собой конкретные и неизменные данные. Различают константы 
  следующих типов: строка (символьные), числа (вещественные), логические (имеют 
  два значения: истина -TRUE, ложь -FALSE ) и неизвестные. Смысл тот же, что и 
  в традиционных системах обработки данных. Неизвестная константа - та, значение 
  которой не определено ( UNKNOW ). Строчная константа имеет длину от I до 255 
  байт и заключается в двойные кавычки. Числовая константа может быть целой и 
  вещественной длинной не более 16 разрядов, не считая знака.<br>
  Выражения формируются по правилам, принятым в алгоязыках, и могут включать переменные 
  и константы одного типа, соединенные операторами (+,-,/,* ,**, MOD - нахождение 
  остатка). Значения переменных могут выражаться строками и числами, могут быть 
  логическими и неизвестными. Выражения, оперирующие с нечеткими переменными, 
  являются, в свою очередь, нечеткими. Выражение может характеризоваться определенным 
  значением фактора уверенности. Понятие функции сходно с тем, которое используется 
  в алгоязыках, например в Бейсике. Функции могут быть с параметрами и без них. 
  функции можно включать в выражения в качестве констант. Значения функций могут 
  быть текстовыми, числовыми и логическими, В числе функций имеются стандартные 
  функции для вычислений синусов, косинусов, логарифмов и др. Имеются две специфических 
  функции: TIME (без аргумента), используемая для выдачи текущего времени, и ALPHASTR 
  (строковое выражение) - логическая функция, принимающая значение &quot;Истина&quot;, 
  если в выражении использованы только буквенные символы.<br>
  Макроопределения представляют собой разновидность функций, у которых в качестве 
  значения задана строка символов (текст, команда, выражение и т.п.).<br>
  В строку символов могут включаться другие макроопределения. Степень вложенности 
  не ограничивается. Использование макроопределений упрощает написание правил. 
  Макроопределения имеют имена и вводятся оператором MACRO &lt;имя&gt; &lt;текст&gt;.<br>
  Шаблоны представляют собой совокупность управляющих символов и используются 
  для задания макета представления данных при выводе. В шаблоне задаются регистры, 
  шрифты, пробелы, разделительные символы и др.<br>
  Знания представляются в виде продукционных правил, которые вводятся в базы знаний 
  с помощью редактора текстов и специальной команды BUILD , а также средств меню 
  по следующей цепочке: экспертные системы - создание ЭС - новый набор правил 
  - имя набора правил - правила - создание. Каждое правило имеет восьмибайтовое 
  имя. В левой части правила (условии) могут задаваться логические выражения любой 
  сложности со множеством переменных различных типов и логических связок типов 
  (и-AND ИЛИ - OR, исключающее ИЛИ - XOR, НЕТ - NOT).<br>
  Логические выражения в качестве аргументов могут включать переменные, поля записей, 
  хранимых в БД, ячейки электронных таблиц, элементы массивов, которые могут связываться 
  между собой либо операторами отношений (равно - EQ,неравно - NE , больше, чем 
  -GT , больше или равно -GE , меньше, чем -LT , меньше или равно -LE и др.), 
  либо арифметическими операторами (+,-,/,*,**). По отношению к числовым аргументам 
  выражений могут использоваться стандартные функции SIN f ZOG , SQRT и др.<br>
  В правой (процедурной) части правила записываются команды оболочки ИНТЕРЭКСПЕРТ. 
  Наиболее распространенными из них являются следующие: команда присваивания (LET)t 
  команда ввода (INPUT), команда вывода (OUTPUT), команды обращения к БЗ, ВД, 
  электронным таблицам, пакетам программ, к ОС ЭВМ для выполнения ее команд, перехода 
  из одного режима работы оболочки к другому. В качестве параметров команд могут 
  выступать текстовые переменные, арифметические выражения.<br>
  Примеры записи операторов.<br>
  1. Увеличить зарплату Иванова на 25 р.:<br>
  IF FIO = «IVANOV» THEN LET SALARY= BASE +25<br>
  2. Запрос на ввод и присвоение значения переменной, задаваемый пользователю:<br>
  IF DAT=17 AND MONTH=&quot;MAPT&quot; THEN INPUT FIO<br>
  STR WITH &quot;ФАМИЛИЯ СОВМЕСТИТЕЛЯ?&quot; ;INPUT SALARY<br>
  NUM WITH<br>
  &quot;Введите сумму заработной платы&quot;<br>
  3. Вывести значение переменной в отведенное окно на экране терминала:<br>
  IF MONTH= &quot;МАРТ&quot; THEN OUTPUT<br>
  &quot;Ожидаемой число рабочих дней&quot;<br>
  Правила могут сопровождаться характеристиками, уточняющими их приоритет, стоимость, 
  комментарием, предварительными условиями, списком переменных условной части, 
  списком переменных процедурной части, пояснением причины выполнения правила, 
  кодом стратегии проверки условия.<br>
  Приоритет правила устанавливается параметром PRIORITY и определяется целым числом 
  от 1 до 100, Приоритет правила характеризует важность его соблюдения для достижения 
  целевой переменной. Приоритеты правил используются при разрешении конфликтов. 
  Стоимость (сложность реализации) правила устанавливается параметром COST и определяется 
  целым числом от 1 до 100 (по умолчанию 50).<br>
  Стоимость правила (иногда говорят значимость, &quot;вес&quot;) используется 
  при разрешении конфликтов и для оценки альтернативных вариантов вывода. Из двух 
  правил, имеющих один и тот же приоритет, выбирают то, которое имеет меньшую 
  стоимость.<br>
  Комментарий к правилу вводится параметром COMMENT и может иметь длину до 255 
  байт. Он показывается разработчику ЭС на экране терминала при аргументации действий. 
  Предварительное условие задается параметром READY. Оно задается одной или несколькими 
  командами и выполняется до того, как будет рассмотрено само правило, например 
  установить доступ к конкретной электронной таблице.<br>
  Список переменных условной части правила задается параметром needs . Он используется 
  при осуществлении прямой стратегии вывода для увеличения скорости работы.<br>
  Список переменных процедурной части правила задается параметром CHAGES применяется 
  либо в том случае, когда значения некоторых переменных должны быть изменены, 
  либо в том случае, когда применяется обратная стратегия вывода. С помощью списка 
  переменных при обратной стратегии вывода ограничивается число исследуемых переменных. 
  Пояснение причины задается в виде текста параметром reason. Этот текст используется 
  при формировании объяснений. Стратегия проверки условия задается с помощью параметра 
  TRY одной буквой: S - точная, Р - допустимая, E - эталонная.<br>
  Правила могут объединяться в наборы, каждый из которых соответствует решению 
  определенных задач. Наборы имеют имена, которые используются как имена файлов. 
  При формировании набора правил выделяют переменную, значение которой нужно определить 
  во время консультации. Набор правил сопровождается процедурами (командами), 
  обеспечивающими настройку оболочки на работу с ним. К числу таких команд относятся 
  инициализация, анализ пароля, формирование окна для вывода ответов системы на 
  запросы типа ПОЧЕМУ, порядок завершения процесса вывода, описания переменных.<br>
  Команды инициализации задаются параметром INITIALIZATION и выполняются при обращении 
  к набору правил до начала процесса вывода. Доступ к набору правил ограничивается 
  паролями. Каждому набору правил присваивается несколько паролей. При совпадении 
  одного из паролей пользователя с паролем набора правил пользователь имеет возможность 
  работать с этим набором. Пароли задаются параметром access.Окно для вывода объектов 
  формируется параметром why window.<br>
  В выбранное окно по запросу пользователя будут выводиться объяснения, почему 
  запрашивается какая-либо информация, или объяснения о получении того или иного 
  вывода. Порядок завершения работы системы после достижения цели устанавливается 
  параметром ДО.<br>
  Описания переменных и типов операций над ними задаются с помощью следующих параметров 
  и команд: метка, способ определения, стратегия поиска, метод определения фактора 
  уверенности для переменных, предельные значения переменной и др.<br>
  Метка переменной задается параметром LABEL и используется при обращении к переменной 
  в процессе вывода заключения. Метка -это текст, который содержит краткое (до 
  64 символов) описание переменной. Поиск переменной задается командой find. Этой 
  командой указывается способ определения значения переменной. Стратегия поиска 
  значения переменной задается параметром WHEN. Предусмотрено три стратегии поиска: 
  до вывода - f , после вывода - l (если результат вывода не удовлетворяет пользователя), 
  никогда - N. Метод определения значения фактора уверенности для переменной задается 
  параметром CF (всего предусмотрено 16 методов). Значения, которые переменная 
  может принимать, задаются параметром limit.<br>
  База знаний может быть построена двумя путями: либо путем внесения в нее полных 
  текстов правил, либо путем включения в нее только фактов, т.е. условной части 
  правил.<br>
  Данные и правила могут иметь оценку их достоверности - фактор (коэффициент) 
  уверенности, который задается в интервале от 0 до 100. Фактор уверенности не 
  соответствует понятию вероятности, ибо сумма факторов уверенности отдельной 
  переменной может быть больше 100 или единицы, как принято при оценке вероятности. 
  Исходный файл с набором правил, описанными переменными и др. имеет имя, совпадающее 
  с заданным именем набора правил, и расширение RSS, Этот файл редактируется командами 
  Build или text. Редактирование этого файла осуществляется также при выборе соответствующих 
  опций в меню: экспертные системы - существующий набор правил - имя набора правил. 
  После редактирования файл со всеми внесенными изменениями сохраняют, используя 
  команду save , и компилируют с помощью команды compile. Скомпилированный набор 
  правил имеет то же имя, но расширение RSC.<br>
  Механизм вывода реализует две стратегии - прямую и обратную. При выводе по прямой 
  стратегии правила просматриваются слева направо, т.е. от посылки (условия) к 
  действию (процедуре).<br>
  В перечень правил, которые участвуют в выводе, включаются все правила, имеющие 
  истинную левую часть. Порядок просмотра правил (разрешение конфликтов) может 
  контролироваться пользователем с помощью переменных среды консультации.<br>
  При обратной стратегии вывода выбираются все правила, правая часть которых может 
  привести к достижению текущей цели. Из множества отобранных таким образом правил 
  выбирается одно по следующим критериям: минимальная стоимость, местоположение 
  в наборе, максимальное значение коэффициента уверенности, наивысший приоритет, 
  наименьшее число неизвестных переменных в левой части правила, по закону случайных 
  чисел.<br>
  Порядок разрешения конфликтов может контролироваться пользователем. Выбранное 
  правило анализируется и в случае истинности его левой части выполняется процедура, 
  указанная в правой части. Если левая часть правила оказывается ложной, оно исключается 
  из рассмотрения. Процесс установления истинности левой части правила может быть 
  сложным, если, например, в ней используются данные электронных таблиц или несколько 
  переменных, значения которых неизвестны. Тогда эти переменные принимаются в 
  качестве целевых и уже для них осуществляется вывод в том же порядке.<br>
  Система объяснений оболочки ИНТЕРЭКСПЕРТ отвечает на два вопроса: КАК (HOW) 
  и ПОЧЕМУ (WHY). Ответы формируются по-разному в соответствии с режимом работы 
  ЭС и полученным результатом. Система позволяет объяснить, почему от пользователя 
  запрашивается информация; показать, на основании каких правил получен вывод; 
  вывести комментарий для пояснения причины выполнения правила; вывести значения 
  переменных, используемых в правилах, и значения факторов уверенности для получаемых 
  заключений. С помощью системы объяснений можно получить ответ на вопрос, почему 
  решение не найдено.<br>
  Система объяснений работает как во время консультации, так и по окончании ее. 
  В основе работы системы лежит трассировка логического вывода. При задании вопроса 
  КАК пользователю ведаются значения целевой переменной и соответствующее значение 
  фактора уверенности. Кроме того, на экране дается список правил, на основе которых 
  сделан вывод. Каждому из этих правил можно задать вопрос ПОЧЕМУ и получить на 
  экране объяснение (комментарий) причины выполнения этого правила. Для часто 
  повторяющихся консультаций, требующих объяснений, можно составить командный 
  файл, автоматизирующий процесс работы с модулем объяснений.<br>
  <img src="img/file_04_02.PNG" width="916" height="688"><br>
  <img src="img/file_04_03.PNG" width="933" height="703"><br>
  Основные понятия, используемые в оболочке ИНТЕРЭКСПЕРТ, приведены в табл. 5.<br>
  В оболочке ИНТЕРЭКСПЕРТ предусмотрено несколько интерфейсов, рассчитанных на 
  различные категории специалистов (табл. 6).<br>
  <img src="img/file_04_04.PNG" width="598" height="274"><br>
  Интерфейс на ограниченном английском языке позволяет специалисту разобраться 
  в возможностях оболочки, ввести новые термины, выполнить вычисления, осуществить 
  моделирование, воспроизвести данные, перейти к режиму консультации. Запросы 
  специалистов, введенные на ограниченном естественном английском языке, анализируются 
  оболочкой и, если они непонятны, специалисту задаются наводящие вопросы.<br>
  Переход к интерфейсу на ограниченном английском языке можно осуществлять в любой 
  момент сеанса работы. Для этого используется команда CHAT. Опытные разработчики 
  ЭС могут обращаться к оболочке с помощью команд. Команды записываются буквами 
  латинского алфавита и могут дополняться, редактироваться. Применение командного 
  режима общения существенно сокращает время реакции и, следовательно, цикл разработки 
  ЭС.<br>
  Начинающие пользователи оболочки ЭС общаться с ней с помощью меню, в которых 
  представлены перечни функциональных возможностей/Пользователь может выбрать 
  любые из них и подать команду на выполнение. Работа в режиме меню проста, но 
  медлительна и однообразна, ибо требует многократных проходов по одним и тем 
  же позициям. В связи с этим в оболочке предусмотрена возможность создания оригинального 
  пользовательского интерфейса, максимально приспособленного к требованиям конкретного 
  пользователя. Причем такой интерфейс, представляющий собой совокупность процедур 
  и команд оболочки ИНТЕРЭКСПЕРТ, пользователь может создавать сам.<br>
  Оболочка ИНТЕРЭКСПЕРТ является русифицированным вариантом оболочки GURU, разработанным 
  советско-болгарским институтом ИНТЕРПРОГРАМЛА. При работе с оболочкой допускается 
  ввод текстов (правил, комментариев и т.п.) на русском языке и возможен вывод 
  системных пояснений на русском языке. Ключевые слова, команды, рабочие макеты 
  экранов представлены на английском языке.<br>
  В оболочке предусмотрен переход от русифицированного варианта системы к англоязычному 
  оригиналу. Оболочка реализована на языках Си и Ассемблер и может быть генерирована 
  на ЭВМ IBM PC XT/AT, EC-1841, CM-1910 в операционной среде MS DOS. Для работы 
  с оболочкой необходимы 400 Кбайт оперативной памяти и 2 Мбайт памяти на ЖМД.<br>
  Разработчики полагают, что с помощью оболочки ИНТЕРЭКСПЕРТ можно создавать БЗ 
  с неограниченным числом правил и переменных в них. Переменные с дискретными 
  значениями (нечеткие переменные) могут иметь до 255 значений. Факторы уверенности 
  могут рассчитываться шестнадцатью способами.<br>
  Оболочка ИНТЕРЭКСПЕРТ распространяется на семи дискетах ЦЕНТРПРОГРАММСИСТЕМ. 
  Цена пяти копий на дискетах заказчика -2550 р. Каждая дополнительная копия стоит 
  175 р. На дискетах записаны демонстрационные примеры. Вместе с дискетами передается 
  документация, включающая руководство пользователя. Документация сложна для самостоятельного 
  изучения начинающим пользователем. В связи с этим рекомендуется обучение правилам 
  пользования оболочкой на специальных курсах.<br>
  Следует отметить, что оболочка GURU, положенная в основу оболочки ИНТЕРЭКСПЕРТ, 
  весьма распространена в Европе и считается одной из лучших. Однако нужно учитывать, 
  что эта оболочка разрабатывалась применительно к мощным универсальным ЭВМ и 
  рабочим станциям и ее свойства на ПЭВМ в значительной мере ослаблены малыми 
  объемами оперативной и внешней памяти, а также малой производительностью. Кроме 
  того, оболочка GURU включает довольно примитивные средства машинной графики 
  и не имеет эффективных средств работы с внешними пакетами файлами, базами данных.<br>
  Оболочка СОВЕТМИКРО предназначена для создания прикладных ЭС диагностического, 
  тестирующего и обучающего типов в областях экономики и медицины. Она является 
  интегрированной и включает модули для обработки текстовой информации, редактор 
  баз знаний, трансляторы языков Лисп и ARL (язык системы), библиотеку процедур 
  на этих языках, модуль управления структурой правил (метаправила), модули отладки 
  и трассировки, модуль построения графических изображений, модуль включения функций 
  пользователя. Знания представляются в виде фреймовой модели.<br>
  Пользовательский интерфейс является дружественным и обеспечивает ведение журнала 
  хода консультации, повторение консультации или части её, распечатку процесса 
  консультации.<br>
  Пользователи располагают возможностью модифицировать состав оболочки и изменять 
  реализуемые ею функции.<br>
  Оболочка имеет интерфейс с базами данных типа d 'Base функционирует на ПЭВМ 
  типа IBM PC (оперативная память - 640 Кбайт). Рекомендуется использование ЖМД. 
  Оболочка допускает применение текстов на русском языке.<br>
  Прототип оболочки СОВЕТМИКРО - оболочка PC Plus фирмы Texas Instruments (США), 
  при адаптации которой устранены недостатки, имевшие место при работе с базами 
  данных типа d'Base. Кроме того, в оболочку СОВЕТМИКРО включены средства работы 
  с Foxbase.<br>
  Оболочка СОВЕТМИКРО распространяется организацией ЦЕНТРПРО-ГРАММСИСТЕМ стоит 
  1170 р. и поставляется на четырех дискетах (включая пять демонстрационных примеров) 
  с технической документацией в двух томах.<br>
  Особенностью оболочки SIMER+MIR является то, что с ее помощью создается модель 
  предметной области и реализуется вывод в виде рассуждений типа аргументации. 
  Другая особенность - ориентация оболочки на то, что ЭС разрабатывается не инженерами 
  по знаниям (когнитологами), а экспертами. Наибольшие преимущества эта оболочка 
  обеспечивает при создании ЭС для прикладных областей c нечеткой структурой, 
  неполным описанием свойств объектов и наличием множества связей между ними.<br>
  Оболочка состоит из двух модулей: SIMER+ - для приобретения знаний и MIR- для 
  моделирования рассуждений. Кроме того, имеются специальные средства для организации 
  взаимодействия указанных модулей.<br>
  Знания представляются в виде сообщений, имеющих структуру следующего вида: &lt;имя 
  объекта&gt; &lt;имя отношения&gt; &lt;имя объекта&gt;. Разработана классификация 
  сообщений и создан соответствующий механизм формирования БЗ.<br>
  Знание приобретаются путём прямого диалога эксперта с модулем SIMER. Структурные 
  знания о предметной области выявляются путем разбиения на ступени и применения 
  репертуарных решеток. В стратегии разбиения реализуются два сценария: «имя-свойство» 
  и «множество имен-свойство». Эксперт может выбирать любой из сценариев или комбинировать 
  их в любом сочетании.<br>
  Сценарий &quot;имя - свойство&quot; включает несколько шагов, на каждом из которых 
  пользователю задаются вопросы од имени события, ш свойства, о существовании 
  множества значений свойства, о типе множества значений свойства (непрерывное, 
  дискретное), о единице измерения свойства, о множестве и подмножестве значении 
  свойства.<br>
  Эксперт отвечает на задаваемые вопросы и этим создается сначала глобальный объект, 
  описываемый именем свойства и областью его значений, а затем совокупность таких 
  описаний формируется в базис I свойств предметной области. Привязка конкретного 
  события к базису свойств осуществляется путем сопоставления ответа пользователю 
  о подмножестве значений свойств события с элементами базиса свойств.<br>
  Сценарий &quot;множество жен - свойство&quot; реализуется путем многократного 
  повторения сценария &quot;имя - свойство&quot; для каждого имени события.<br>
  Репертуарные решетки используются для того чтобы отделить субъективные мнения 
  (знания) эксперта, которые он может вводить сознательно или неосознанно, от 
  объективных.<br>
  Модуль SIMER также позволяет вводить казуальные знания, под которыми в данном 
  случае понимаются связи между следствиями и разнообразными причинами, связи 
  между событиями прошлого и настоящего, настоящего и будущего, а также между 
  событиями настоящего.<br>
  Степень достоверности гипотезы, порожденной при работе по сценариям и формировании 
  казуальных знаний, повышается путем подтверждения сходства, основанного на взаимодействии 
  стратегии разбиения на ступени со стратегией выявления сходства, а также путем 
  анализа свойств событий.<br>
  Модуль MIR начинает работу с спроса и построения множества подтвержденных признаков. 
  Затем на основе анализа положительных связей подтвержденных признаков строится 
  множество гипотез, на базе которого формируется новое множество признаков, связанных 
  положительными связями с гипотезами ранее полученного множества. Процесс циклически 
  повторяется и заканчивается, когда множество подтвержденных признаков и множество 
  гипотез стабилизируются. После этого из множества гипотез исключаются те, которым 
  соответствуют отрицательные связи с подтвержденными признаками, и те, которым 
  соответствуют обусловленные неподтвержденные признаки, т.е. отсутствие которых 
  более важно при принятии решения, чем присутствие.<br>
  Затем рассматриваются гипотезы, оставшиеся не исключенными. При этом подбираются 
  либо характеристические значения свойства, либо события, связанные с одной из 
  гипотез, позволяющие идентифицировать каждую из них. В результате число гипотез 
  сокращается до тех пор, пока их множество не стабилизируется. Из этого множества 
  выбирается минимальное подмножество, связанное положительными связями со всеми 
  подтвержденными признаками. Выбранное подмножество рассматривается как результат 
  работы с системой.<br>
  Оболочка SIMER+ MIR разработана ИПС АН СССР (г. Переславль-Залесский).<br>
  Оболочка XTOOLS представляет собой интегрированный пакет программных средств, 
  необходимых для создания прикладных ЭС конструирования и проектирования, с БЗ 
  в виде правил-продукций. В состав пакета включены СУБД реляционного типа, средства 
  машинной графики, интерпретатор языка логического программирования, а также 
  средства разработки диалогового интерфейса пользователя, средства обращения 
  к внешним программам на языках Фортран, Си и средства обращения к внешним графическим 
  базам данным.<br>
  Оболочка XTOOLS рассчитана на разработку ЭС индивидуального характера на языках 
  Си и Фортран силами прикладных программистов. Средства машинной графики совместимы 
  с известными системами CAD/CAM. С помощью средств пакета можно создавать дерево 
  меню и управлять процессом вывода с помощью таблета.<br>
  <img src="img/file_04_05.PNG" width="605" height="213"><br>
  Особенности интерпретатора языка логического программировании имена предикатов 
  и термов могут задаваться на русском языке; используется редактор правил шаблонного 
  типа, обеспечивающий создание, модификацию, удаление, восстановление правил-продукций 
  на русском языке.<br>
  Архитектура оболочки представлена на рис. 2. Оболочка разработана и распространяется 
  НИЦ АСК (г. Москва).<br>
</p>
<blockquote> 
  <table border="0" cellpadding="0" cellspacing="0">
    <tr> 
      <td><a href="003.htm" target="_self" onClick="MM_nbGroup('down','group1','Back','',1)" onMouseOver="MM_nbGroup('over','Back','','',1)" onMouseOut="MM_nbGroup('out')"><img src="img/Back.gif" alt="" name="Back" width="73" height="22" border="0" onload=""></a></td>
      <td><a href="main09.htm" target="_self" onClick="MM_nbGroup('down','group1','Menu','',1)" onMouseOver="MM_nbGroup('over','Menu','','',1)" onMouseOut="MM_nbGroup('out')"><img src="img/Menu.gif" alt="" name="Menu" width="73" height="22" border="0" onload=""></a></td>
      <td><a href="005.htm" target="_self" onClick="MM_nbGroup('down','group1','For','',1)" onMouseOver="MM_nbGroup('over','For','','',1)" onMouseOut="MM_nbGroup('out')"><img src="img/For.gif" alt="" name="For" width="73" height="22" border="0" onload=""></a></td>
    </tr>
  </table>
  
</blockquote>
</body>
</html>
